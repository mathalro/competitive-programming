#include <bits/stdc++.h>

using namespace std;

struct aresta {
	vector<int> v;
	int peso;
	aresta() {}
	aresta(vector<int> a, int b) : v(a), peso(b) {}

	bool operator < (const aresta &p) const {
		return p.peso < peso;
	}
};

const int container1[] = {0, 0, 1, 1, 2, 2, 3, 4, 5, 6};
const int container2[] = {1, 4, 2, 5, 3, 6, 7, 5, 6, 7};
vector<int> inicial, final;

map<vector<int>, int > distancia;
map<vector<int>, int >::iterator itD;

void imprime(vector<int> v) {
	for (int i = 0 ; i < 4; i++) {
		cout << v[i] << " ";
	}
	cout << endl;
	for (int i = 4 ; i < 8; i++) {
		cout << v[i] << " ";
	}
	
	cout << endl << endl;
}


int djkstra() {
	priority_queue<aresta> q;
	q.push(aresta(inicial, 0));
	distancia.insert(make_pair(inicial, 0));


	int cont = 0;
	while (!q.empty()) {
		aresta u = q.top(); q.pop();				//tira um no da pilha
		cout << "Nivel: " << cont++ << endl;
		if (u.v == final) {
			itD = distancia.find(u.v);
			return itD->second;	
		}

		itD = distancia.find(u.v);				//encontra esse vertice no map de distancias
		int distanciaAtual = itD->second;		

		vector<aresta> adjacentes;
		for (int i = 0; i < 10; i++) {
			if (u.v[container1[i]] != u.v[container2[i]]) {
				vector<int> aux = u.v;
				int peso = u.v[container1[i]] + u.v[container2[i]];
				swap(aux[container1[i]], aux[container2[i]]);
				adjacentes.push_back(aresta(aux, peso));
				cout << "Custo: " << peso << endl;
				imprime(aux);
			}
		}

		for (int i = 0; i < adjacentes.size(); i++) {
			int peso = adjacentes[i].peso;		//salva o peso para esse adjacente
			vector<int> v = adjacentes[i].v;	//salva o indice do vertice atual
			itD = distancia.find(v);			//encontra esse vertice no vertice atual
			if (itD == distancia.end() || itD->second > peso + distanciaAtual) {		
				distancia.insert(make_pair(v, peso + distanciaAtual));
				q.push(aresta(v, peso + distanciaAtual));
			}
		}
	}
}

int main () {
	int x;
	for(int i = 0; i < 8; i++) {
		scanf("%d", &x);
		inicial.push_back(x);
	}

	for (int i = 0; i < 8; i++) {
		scanf("%d", &x);
		final.push_back(x);
	}

	if (inicial == final) printf("0\n");
	else printf("%d\n", djkstra());

	return 0;
}
